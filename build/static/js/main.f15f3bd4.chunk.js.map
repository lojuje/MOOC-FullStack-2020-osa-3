{"version":3,"sources":["components/FilterSection.js","components/FormSection.js","components/Luettelo.js","components/PhoneBookSection.js","services/service.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["FilterSection","props","console","log","value","filter","onChange","FormSection","handlerForSubmit","handlerForName","handlerForNumber","newName","newNumber","onSubmit","type","Luettelo","person","handleRemove","number","name","onClick","PhoneBookSection","persons","rajausEhto","handlerForRemove","map","key","baseUrl","axios","get","newObject","post","id","put","delete","Notification","message","status","className","App","useState","setNewName","setNewNumber","setFilter","setPersons","notifMessage","setNotifMessage","setStatus","useEffect","Service","then","response","data","event","target","preventDefault","newNameObject","sameName","find","window","confirm","updated","catch","error","setTimeout","concat","country","toUpperCase","includes","removed","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f15f3bd4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst FilterSection = (props) => {\r\n    console.log('FilterSection pelaa', props)\r\n    return (\r\n      <p>Filter shown with <input \r\n                            value={props.filter} \r\n                            onChange={props.onChange}/> \r\n     </p>\r\n    )\r\n  }\r\n\r\nexport default FilterSection","import React from 'react'\r\n\r\nconst FormSection = ({handlerForSubmit, handlerForName,\r\n                      handlerForNumber, newName, newNumber}) => {\r\n  console.log('FormSection toimii')\r\n  return (\r\n  <form onSubmit={handlerForSubmit}>\r\n      <div>\r\n        Name: <input \r\n            value={newName} \r\n            onChange={handlerForName}\r\n        />\r\n      </div>\r\n      <div>\r\n        Number: <input\r\n            value={newNumber}\r\n            onChange={handlerForNumber}      \r\n        />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">Add</button>\r\n      </div>\r\n  </form>\r\n  )\r\n}\r\n\r\nexport default FormSection","import React from 'react'\r\n\r\nconst Luettelo = ({person, number, handleRemove}) => {\r\n    console.log('Luettelo pelaa')\r\n    /*Palautus osa on table muodossa, koska omaan\r\n    silmään näyttää miellyttävämmältä\r\n    */\r\n    return(\r\n    <tbody> \r\n      <tr>\r\n        <td>{person.name}</td>\r\n        <td>{person.number}</td>\r\n        <td>\r\n          <button onClick={() => \r\n            handleRemove(person)}>Remove\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n    )\r\n  }\r\n\r\n\r\nexport default Luettelo","import React from 'react'\r\nimport Luettelo from './Luettelo'\r\n\r\nconst PhoneBookSection = ({persons, rajausEhto, handlerForRemove}) => {\r\n    console.log('PhonebookSection pelaa', persons)\r\n  \r\n\r\n    return(\r\n      <div>\r\n      <table>\r\n      {persons.filter(rajausEhto).map(\r\n        person => \r\n        <Luettelo key={person.number} \r\n                  person={person}\r\n                  handleRemove={handlerForRemove}/>\r\n      )}\r\n      </table>\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\nexport default PhoneBookSection","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\n\r\nconst getAll = () =>{\r\n    return axios.get(baseUrl)\r\n}\r\n\r\n\r\nconst create = newObject => {\r\n    return axios.post(baseUrl, newObject)\r\n}\r\n\r\n\r\nconst update = (id, newObject) => {\r\n    console.log(id, newObject)\r\n    return axios.put(`${baseUrl}/${id}`, newObject)\r\n  }\r\n\r\n\r\nconst remove = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n  \r\n\r\nexport default {\r\n    getAll, \r\n    create,\r\n    update,\r\n    remove\r\n}","import React from 'react'\r\n\r\n\r\nconst Notification = ({ message, status }) => {\r\n  if (message === null) {\r\n    return null\r\n  } else if (status === 'created') {\r\n      return(\r\n          <div className='created'>\r\n              {message}\r\n          </div>\r\n      )\r\n  } else if (status === 'modified') {\r\n    return(\r\n        <div className='modified'>\r\n            {message}\r\n        </div>\r\n    )\r\n} else if (status === 'deleted') {\r\n    return(\r\n        <div className='deleted'>\r\n            {message}\r\n        </div>\r\n    )\r\n} else if (status === 'removed') {\r\n  return(\r\n      <div className='removed'>\r\n          {message}\r\n      </div>\r\n  )\r\n}\r\n\r\n\r\n  return (\r\n    <div className=\"error\">\r\n      <p></p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport FilterSection from './components/FilterSection'\nimport FormSection from './components/FormSection'\nimport PhoneBookSection from './components/PhoneBookSection'\nimport Service from './services/service'\nimport Notification from './components/Notification'\n\n\n/*\nPuhelinluettelo 2.20* step 12\n*/\n\n\nconst App = () => {\n\n\n  /*---------------------------------------App consts-----------------------------------------*/\n\n\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber] = useState('')\n  const [ filter, setFilter] = useState('')\n  const [ persons, setPersons] = useState([]) \n  const [notifMessage, setNotifMessage] = useState('')\n  const [status, setStatus] = useState('')\n\n  /*---------------------------------------effect hook-----------------------------------------*/\n\n\n  useEffect(() => {\n    console.log('effect')\n    Service\n      .getAll()\n      .then(response => {\n        console.log('promise fulfilled')\n        setPersons(response.data)\n      })\n  }, [])\n\n\n/*---------------------------------------Handlers--------------------------------------------*/\n\n\n  //Submit handler, hoitaa päivityksen ja lisäyksen\n  const handlerForSubmit = (event) => {\n    event.preventDefault()\n\n    const newNameObject = {\n       name: newName,\n       number: newNumber\n    }\n\n    const sameName = persons.find(person => person.name === newName)\n\n    if(sameName && window.confirm(`${newName} is already in the phonebook, would you like to update the number?`)) {\n        sameName.number = newNumber\n        Service\n        .update(sameName.id, sameName)\n         .then(updated => {\n           setPersons(persons.map(person => \n            person.id !== updated.id ? person : updated))\n         }).catch(error => {\n          console.log('failed to update')\n          setStatus('removed')\n          setNotifMessage( `${newName} has been already been removed from the server`)\n        })\n        setStatus('modified')\n        setNotifMessage(`${newName}'s number has been changed`)\n        setTimeout(() => {\n        setNotifMessage(null)\n       }, 5000)\n    } else {\n      Service\n        .create(newNameObject)\n         .then(response => {\n          setPersons(persons.concat(response.data))\n\n          setNewName('')\n          setNewNumber('')\n        }).catch(error => {\n          console.log('fail')\n        })\n      setStatus('created')\n      setNotifMessage(`${newName} has been added`)\n      setTimeout(() => {\n        setNotifMessage(null)\n    }, 5000)\n    }\n  }\n\n\n  //Hoitaa henkilön poistamisen\n  const handlerForRemove = removed => {\n    if (window.confirm(`Delete ${removed.name} from the phonebook?`) === true) {\n      Service\n        .remove(removed.id)\n        .then(\n          setPersons(persons.filter(person => \n            person.id !== removed.id))\n    )}\n        setStatus('deleted')\n        setNotifMessage(`${removed.name}'s number has been deleted`)\n        setTimeout(() => {\n        setNotifMessage(null)\n       }, 5000)\n  }\n\n\n  //Name handler\n  const handlerForName = (event) => {\n    setNewName(event.target.value)\n  }\n\n\n  //Number handler\n  const handlerForNumber = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n\n  const handlerForFilter = (event) => {\n    setFilter(event.target.value)\n  }\n\n\n  const rajausEhto = (country) => (\n    country.name.toUpperCase().includes(\n      filter.toUpperCase()\n    ))\n\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notifMessage} status={status}/>\n      <FilterSection filter={filter}\n                     onChange={handlerForFilter}\n      />\n      <h3>Add a new person to the phonebook</h3>\n      <FormSection newName={newName}\n                   newNumber={newNumber}\n                   handlerForSubmit={handlerForSubmit}\n                   handlerForName={handlerForName}\n                   handlerForNumber={handlerForNumber}\n      />\n      <h2>Numbers</h2>\n      <PhoneBookSection persons={persons}\n                        rajausEhto={rajausEhto}\n                        handlerForRemove={handlerForRemove}              \n      />\n    </div>\n  )\n}\n\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}